---
# file: ansible/playbooks/230-setup-promstack.yml
# Description:
# Set up Prometheus Stack on Kubernetes
# - Installs kube-prometheus-stack using Helm chart
# - Configures Prometheus, Grafana, and Alertmanager with appropriate settings
#
# Usage:
# ansible-playbook playbooks/230-setup-promstack.yml -e kube_context="rancher-desktop"

- name: Set up Prometheus Stack on Kubernetes
  hosts: localhost
  gather_facts: false
  vars:
    manifests_folder: "/mnt/urbalurbadisk/manifests"
    merged_kubeconf_file: "/mnt/urbalurbadisk/kubeconfig/kubeconf-all"
    monitoring_namespace: "monitoring"
    installation_timeout: 600  # 10 minutes timeout for installations
    pod_readiness_timeout: 300  # 5 minutes timeout for pod readiness
    # Helm chart references
    promstack_chart: "prometheus-community/kube-prometheus-stack"
    promstack_chart_version: "45.7.1"  # Specify the chart version to ensure reproducibility
    # Config files
    promstack_config_file: "{{ manifests_folder }}/230-promstack-config.yaml"

  tasks:
    - name: 1. Get current Kubernetes context if kube_context not provided
      ansible.builtin.shell: |
        kubectl config current-context
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: current_context
      changed_when: false
      when: kube_context is not defined
      
    - name: 2. Set kube_context from current context if not provided
      ansible.builtin.set_fact:
        kube_context: "{{ current_context.stdout }}"
      when: kube_context is not defined

    - name: 3. Print playbook description
      ansible.builtin.debug:
        msg: "Setting up Prometheus Stack on Kubernetes context: {{ kube_context }}"
    
    - name: 4. Create monitoring namespace if it doesn't exist
      ansible.builtin.shell: kubectl create namespace {{ monitoring_namespace }} --dry-run=client -o yaml | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: namespace_result
      changed_when: namespace_result.rc == 0
      failed_when: namespace_result.rc != 0

    - name: 5a. Check existing Helm repositories
      ansible.builtin.command: helm repo list
      register: helm_repo_list
      changed_when: false

    - name: 5b. Add Prometheus Community Helm repository if needed
      kubernetes.core.helm_repository:
        name: "prometheus-community"
        repo_url: "https://prometheus-community.github.io/helm-charts"
      when: "'prometheus-community' not in helm_repo_list.stdout"
      register: helm_repo_result

    - name: 5c. Update Helm repositories
      ansible.builtin.command: helm repo update
      changed_when: false
    
    # Install Prometheus Stack
    - name: 6a. Deploy Prometheus Stack
      ansible.builtin.command: >
        helm upgrade --install prometheus-stack {{ promstack_chart }} 
        --namespace {{ monitoring_namespace }}
        --version {{ promstack_chart_version }}
        -f {{ promstack_config_file }}
        --timeout {{ installation_timeout }}s
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: promstack_result
      changed_when: true

    - name: 6b. Display Prometheus Stack deployment result
      ansible.builtin.debug:
        msg: "Prometheus Stack deployment initiated. Waiting for readiness..."
    
    - name: 6c. Wait for Prometheus server pod to be ready
      ansible.builtin.shell: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus -n {{ monitoring_namespace }} --timeout={{ pod_readiness_timeout }}s
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: prometheus_wait_result
      changed_when: false
      ignore_errors: true
    
    - name: 6d. Wait for Grafana pod to be ready
      ansible.builtin.shell: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n {{ monitoring_namespace }} --timeout={{ pod_readiness_timeout }}s
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: grafana_wait_result
      changed_when: false
      ignore_errors: true
    
    - name: 6e. Wait for Alertmanager pod to be ready
      ansible.builtin.shell: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=alertmanager -n {{ monitoring_namespace }} --timeout={{ pod_readiness_timeout }}s
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: alertmanager_wait_result
      changed_when: false
      ignore_errors: true
    
    - name: 6f. Display component readiness status
      ansible.builtin.debug:
        msg: |
          Component readiness status:
          Prometheus: {{ 'Ready' if prometheus_wait_result.rc == 0 else 'Not ready yet' }}
          Grafana: {{ 'Ready' if grafana_wait_result.rc == 0 else 'Not ready yet' }}
          Alertmanager: {{ 'Ready' if alertmanager_wait_result.rc == 0 else 'Not ready yet' }}
    
    # Give the deployment a bit more time to stabilize
    - name: 6g. Give the deployment a bit more time to stabilize
      ansible.builtin.pause:
        seconds: 30
      when: prometheus_wait_result.rc != 0 or grafana_wait_result.rc != 0 or alertmanager_wait_result.rc != 0
    
    # Verify deployments and services
    - name: 7a. Get all Prometheus Stack pods
      ansible.builtin.shell: |
        kubectl get pods -n {{ monitoring_namespace }}
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: promstack_pods
      changed_when: false
    
    - name: 7b. Display Prometheus Stack pods
      ansible.builtin.debug:
        var: promstack_pods.stdout_lines
    
    - name: 8a. Get all Prometheus Stack services
      ansible.builtin.shell: |
        kubectl get svc -n {{ monitoring_namespace }}
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: promstack_services
      changed_when: false
    
    - name: 8b. Display Prometheus Stack services
      ansible.builtin.debug:
        var: promstack_services.stdout_lines
    
    # Get Ingress information
    - name: 9a. Get Prometheus Stack Ingress details
      ansible.builtin.shell: |
        kubectl get ingress -n {{ monitoring_namespace }} || echo "No Ingress found"
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: promstack_ingress
      changed_when: false
      ignore_errors: true
    
    - name: 9b. Display Prometheus Stack Ingress details
      ansible.builtin.debug:
        var: promstack_ingress.stdout_lines
      when: promstack_ingress.stdout != "No Ingress found"
    
    # Check PersistentVolumeClaims
    - name: 10a. Get PersistentVolumeClaims
      ansible.builtin.shell: |
        kubectl get pvc -n {{ monitoring_namespace }} || echo "No PVCs found"
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: promstack_pvcs
      changed_when: false
      ignore_errors: true
    
    - name: 10b. Display PersistentVolumeClaims
      ansible.builtin.debug:
        var: promstack_pvcs.stdout_lines
      when: promstack_pvcs.stdout != "No PVCs found"
    
    # Determine if the installation was successful
    - name: 11a. Count running pods
      ansible.builtin.shell: |
        kubectl get pods -n {{ monitoring_namespace }} | grep -v NAME | grep -c Running || echo "0"
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: running_pods_count
      changed_when: false
      ignore_errors: true
    
    - name: 11b. Determine installation success
      ansible.builtin.set_fact:
        # We should have at least 6 running pods for a successful installation (prometheus, grafana, alertmanager, operator, node-exporter, etc.)
        services_setup_successful: "{{ (running_pods_count.stdout | int >= 6) }}"
    
    # Check for pods still initializing
    - name: 11c. Check for pods still initializing
      ansible.builtin.shell: |
        CREATING_PODS=$(kubectl get pods -n {{ monitoring_namespace }} | grep -c "ContainerCreating" || echo "0")
        INIT_PODS=$(kubectl get pods -n {{ monitoring_namespace }} | grep -c "Init:" || echo "0")
        PENDING_PODS=$(kubectl get pods -n {{ monitoring_namespace }} | grep -c "Pending" || echo "0")
        TOTAL_INITIALIZING=$((${CREATING_PODS} + ${INIT_PODS} + ${PENDING_PODS}))
        echo "${TOTAL_INITIALIZING}"
      args:
        executable: /bin/bash
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: initializing_pods_count
      changed_when: false
      ignore_errors: true
    
    # Set initialization message
    - name: 11d. Set initialization message when pods are initializing
      ansible.builtin.set_fact:
        initialization_message: "Some pods are still initializing. This is normal for the first deployment."
      when: initializing_pods_count.stdout | int > 0
    
    - name: 11d-alt. Set initialization message when no pods initializing
      ansible.builtin.set_fact:
        initialization_message: "All pods have completed initialization."
      when: initializing_pods_count.stdout | int == 0
    
    - name: 12. Display final installation status
      ansible.builtin.debug:
        msg: |
          Prometheus Stack Installation Status:
          {{ 'SUCCESS - All key components are running' if services_setup_successful else 'PARTIAL SUCCESS - Some components may not be running yet' }}
          
          Running pods: {{ running_pods_count.stdout }} / {{ promstack_pods.stdout_lines | length - 1 }}
          {{ initialization_message }}
          
          To access the monitoring stack:
          
          1. Grafana (Web UI):
             URL: http://grafana.localhost
             Username: admin
             Password: admin123
          
          2. Prometheus (Web UI):
             URL: http://prometheus.localhost
          
          3. Alertmanager (Web UI):
             URL: http://alertmanager.localhost
          
          {% if promstack_ingress.stdout != "No Ingress found" %}
          4. Ingress Configuration:
             {{ promstack_ingress.stdout }}
          {% endif %}
          
          Alternative access via port-forwarding:
          - Grafana: kubectl port-forward svc/prometheus-stack-grafana -n {{ monitoring_namespace }} 3000:80
          - Prometheus: kubectl port-forward svc/prometheus-stack-kube-prom-prometheus -n {{ monitoring_namespace }} 9090:9090
          - Alertmanager: kubectl port-forward svc/prometheus-stack-kube-prom-alertmanager -n {{ monitoring_namespace }} 9093:9093
          
          Storage Information:
          - Prometheus data is persisted using storage class: microk8s-hostpath
          - Grafana dashboards and settings are persisted
          - Alertmanager configuration is persisted
          
          Troubleshooting:
          - Check pod status: kubectl get pods -n {{ monitoring_namespace }}
          - View logs: kubectl logs -f <pod-name> -n {{ monitoring_namespace }}
          - Check PVC status: kubectl get pvc -n {{ monitoring_namespace }}
          - Restart a deployment: kubectl rollout restart deployment/<deployment-name> -n {{ monitoring_namespace }}
          - Check Prometheus targets: Access Prometheus UI -> Status -> Targets
          - Check Grafana data sources: Access Grafana UI -> Configuration -> Data Sources
          
          {{ 'INSTALLATION SUCCESSFUL' if services_setup_successful else 'INSTALLATION STATUS: Some components may still be starting' }}
