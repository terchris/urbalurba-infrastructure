# file kuberbetes-secrets.yml
# push to kubernetes using: kubectl apply -f topsecret/kubernetes/kubernetes-secrets.yml
# or from the host mac using the script: update-kubernetes-secrets-rancher.sh

apiVersion: v1
kind: Secret
metadata:
  name: urbalurba-secrets
  namespace: default
type: Opaque
stringData:

# for postgres server
  PGPASSWORD: SecretPassword1 # superuser postgres database pw - change it!
  PGHOST: postgresql.default  # database server hostname in default namespace in the currect cluster

# for MySQL
  MYSQL_ROOT_PASSWORD: SecretPassword1 # superuser mysql database pw - change it!
  MYSQL_HOST: mysql.default            # database server hostname in default namespace in the currect cluster
  MYSQL_DATABASE: mydatabase           # just creating a database, user and pw bacause the bitnami helm supports it
  MYSQL_USER: myuser                   # just creating a database, user and pw bacause the bitnami helm supports it
  MYSQL_PASSWORD: SecretPassword1      # just creating a database, user and pw bacause the bitnami helm supports it
  


# for pgadmin
  PGADMIN_DEFAULT_EMAIL: jalla@email.no # change it!
  PGADMIN_DEFAULT_PASSWORD: SecretPassword1 # change it!

# for redis
  REDIS_HOST: redis
  REDIS_PORT: "6379"
  REDIS_PASSWORD: SecretPassword1 # change it!

# for redis commander - web ui to see what is going on - must have for debugging
  redis-commander-username: "jalla@email.no"
  redis-commander-password: "SecretPassword1"

# for Grafana admin credentials - for checking logging
  grafana-admin-user: "jalla@email.no" 
  grafana-admin-password: "SecretPassword1"  


# for Tailscale (network between hosts) - REMEMBER these keys expire in max 90 days
  TAILSCALE_SECRET: tskey-auth-ktyTufs...and---so-on
# the TAILSCALE_SECRET is used when ading hosts to the network
  TAILSCALE_ACL_KEY: tskey-api-kda.... and so on
# the TAILSCALE_ACL_KEY is used by the provision-host to manage access control on the network
  TAILSCALE_TAILNET: githubid.github
# the TAILSCALE_TAILNET is the name of the tailscale network - eg your github id  
  TAILSCALE_DOMAIN: some-name.ts.net
# the domain name is manually set in the portal here https://login.tailscale.com/admin/dns  
  TAILSCALE_CLUSTER_HOSTNAME: www
# the TAILSCALE_CLUSTER_HOSTNAME is the name of the nginx webserver that is set up by default   so the name of the webserver will be $TAILSCALE_CLUSTER_HOSTNAME.$TAILSCALE_DOMAIN

  TAILSCALE_CLIENTID: ksNFYZ....
  TAILSCALE_CLIENTSECRET: tskey-client-ksNF...



# for Cloudflare tunnel and DNS (for exposing services on the internet)
  CLOUDFLARE_DNS_TOKEN: Gu...and-so-on
  CLOUDFLARE_TEST_TUNNELNAME: nerdmeet-test
  CLOUDFLARE_TEST_DOMAINNAME: nerdmeet.org
  CLOUDFLARE_TEST_SUBDOMAINS: www-test, jalla-test
  
  CLOUDFLARE_PROD_TUNNELNAME: nerdmeet-prod
  CLOUDFLARE_PROD_DOMAINNAME: nerdmeet.org
  CLOUDFLARE_PROD_SUBDOMAINS: www,jalla


# for Elasticsearch
  ELASTICSEARCH_PASSWORD: SecretPassword1 # change it!


# for Azure,cgp,oci,aws VM/ Raspberry pi that runs microk8s
  UBUNTU_VM_USER: theadminusername # change it!
  UBUNTU_VM_USER_PASSWORD: SecretPassword1 # change it!


# for raspberry pi that runs microk8s
  WIFI_SSID: jalla
  WIFI_PASSWORD: SecretPassword1 # change it!


# for MongoDB 
  MONGODB_ROOT_USER: root
  MONGODB_ROOT_PASSWORD: SecretPassword1  # CHANGE THIS: bitnami is the standard pw used by bitnami
  
# MongoDB is set up an initalized for use by gravitee
  GRAVITEE_MONGODB_DATABASE_NAME: graviteedb   
  GRAVITEE_MONGODB_DATABASE_USER: gravitee_user
  GRAVITEE_MONGODB_DATABASE_PASSWORD: SecretPassword1  # Change this to a secure password
  




# for gravitee.io the API management system

  # Gravitee admin user
  GRAVITEE_ADMIN_EMAIL: jalla@email.no # Change this to your admin email
  GRAVITEE_ADMIN_PASSWORD: SecretPassword1  # Change this to a secure password

  # Gravitee domain names
  #    GRAVITEE_TEST_CLOUDFLARE_DOMAIN is a pointer to this variable
  GRAVITEE_TEST_CLOUDFLARE_DOMAIN: CLOUDFLARE_TEST_DOMAINNAME
  #    GRAVITEE_TEST_CLOUDFLARE_TUNNELNAME is a pointer to this variable  
  GRAVITEE_TEST_CLOUDFLARE_TUNNELNAME: CLOUDFLARE_TEST_TUNNELNAME
  # The main gateway where external developers and applications send API requests to access the APIs managed by Gravitee. (eg: api.nerdmeet.org)
  GRAVITEE_TEST_GATEWAY_SUBDOMAIN: gateway-test
  # The backend API that handles all management operations for Gravitee APIM, used by the management UI and for programmatic administration. (eg management-api.nerdmeet.org)
  GRAVITEE_TEST_MANAGEMENT_API_SUBDOMAIN: management-api-test
  # The web-based developer portal where API consumers can discover, test, and subscribe to APIs, as well as access documentation and manage their accounts.( eg portal.nerdmeet.org)
  GRAVITEE_TEST_DEV_PORTAL_SUBDOMAIN: portal-test
  # The web-based management interface where administrators configure and manage APIs, monitor traffic, set policies, and perform other administrative tasks for the Gravitee APIM platform. (eg:  management.nerdmeet.org)
  GRAVITEE_TEST_MANAGEMENT_CONSOLE_SUBDOMAIN: management-test
  # The backend API that serves data to the developer portal, handling operations like API discovery, documentation retrieval, and developer account management. (eg portal-api.nerdmeet.org)
  GRAVITEE_TEST_DEV_PORTAL_API_SUBDOMAIN: portal-api-test


  # Gravitee encryption key (used for encrypting sensitive data)
  GRAVITEE_ENCRYPTION_KEY: EncryptionKeySecretPassword1  # Generate a secure random string for this


# for github
  GITHUB_ACCESS_TOKEN: XXXXXXX # get your own
  YOUR_GITHUB_USERNAME: XXXXXXX # fill in  your own


# for urbalurba database - or your system - change to what you need
  URBALURBA_DATABASE_PASSWORD: XXXXXXX
  URBALURBA_DATABASE_USER: XXXXXXX
  URBALURBA_DATABASE_NAME: XXXXXXX 

# for strapi - this is for my system - change to what you need
  APP_KEYS: XXXXXXX
  API_TOKEN_SALT: XXXXXXX
  ADMIN_JWT_SECRET: XXXXXXX
  TRANSFER_TOKEN_SALT: XXXXXXX
  JWT_SECRET: XXXXXXX
  URBALURBA_ADMIN_EMAIL: XXXXXXX #user that initiate the strapi system
  URBALURBA_ADMIN_PASSWORD: XXXXXXX




  MULTIPASS-MICROK8S-DASHBOARD-TOKEN: eyJhb.....


---
# Secret for GitHub Container Registry credentials - you need it for automatic deploy - the containers are stored here
apiVersion: v1
kind: Secret
metadata:
  name: ghcr-credentials
  namespace: default  
type: kubernetes.io/dockerconfigjson
stringData:
  .dockerconfigjson: |
    {
      "auths": {
        "ghcr.io": {
          "username": "XXXXXXX",
          "password": "ghp_XXXXXXX",
          "auth": "dGXXXXXXX=="
        }
      }
    }  


---
# TODO: check if it is still needed. cludflare secrets - automatically opdated by playbooks/751-deploy-network-cloudflare-tunnel.yml
apiVersion: v1
kind: Secret
metadata:
  name: cloudflared-credentials
type: Opaque
stringData:
  cloudflare-nerdmeet-test-tunnel.json: |
    {
      "AccountTag": "XXXXXXX",
      "TunnelSecret": "XXXXXXX=",
      "TunnelID": "XXXXXXX"
    }
  credentials-prod.json: |
    {
      "AccountTag": "XXXXXXX",
      "TunnelSecret": "XXXXXXX",
      "TunnelID": "XXXXXXX"
    }



---
# pgadmin password
apiVersion: v1
kind: Secret
metadata:
  name: pgadmin4-password
type: Opaque
stringData:
  password: SecretPassword1


#------------ ai namespace ----------

---
# Define the ai namespace first
apiVersion: v1
kind: Namespace
metadata:
  name: ai


---
# secrets for ai namespace
apiVersion: v1 
kind: Secret 
metadata:   
  name: urbalurba-secrets   
  namespace: ai
type: Opaque 
stringData: 

# for open-webui

  # These are for thhe script that creates the database for openwebui and enables the vector functionality u06-openwebui-create-postgres.yml
  OPENWEBUI_POSTGRES_USER: openwebui
  OPENWEBUI_POSTGRES_PASSWORD: openwebui
  OPENWEBUI_POSTGRES_DB: openwebui

  # this is the connection strng in full that openwebui uses to connect to the database
  DATABASE_URL: postgresql://openwebui:openwebui@postgresql.default:5432/openwebui


 # for OpenAI API integration - OpenAI API key for embeddings and models  The default value in open-webui helm is "0p3n-w3bu!"
  OPENWEBUI_OPENAI_API_KEY: "sk-SecretPassword1" 

  # LiteLLM provider API keys
  AZURE_API_KEY: "azure-key-placeholder"
  AZURE_API_BASE: "https://your-endpoint.openai.azure.com"
  OPENAI_API_KEY: "openai-key-placeholder" 
  ANTHROPIC_API_KEY: "anthropic-key-placeholder"
  # LiteLLM master key - this needs to match OPENWEBUI_OPENAI_API_KEY for the integration to work
  LITELLM_PROXY_MASTER_KEY: "sk-SecretPassword1"


#------------ argocd namespace ----------

---
# Define the argocd namespace first
apiVersion: v1
kind: Namespace
metadata:
  name: argocd

---
# secrets for argocd 
apiVersion: v1
kind: Secret
metadata:
  name: argocd-secret
  namespace: argocd
type: Opaque
stringData:
  # Admin password (bcrypt hashed)
  # Do this to create the hashed pawwsord: htpasswd -nbBC 10 admin SecretPassword1 | cut -d ':' -f 2
  admin.password: "$2y$10$tlWBaWXviz5CY/33rCVciOuW1mRCo2yMDyXWaC6UGJT0mUVX.i4Au"
  admin.passwordMtime: "2025-04-15T12:00:00Z"
  
  # Any other ArgoCD-specific secrets

#------------ jupyterhub namespace ----------

---
# Define the jupyterhub namespace first
apiVersion: v1
kind: Namespace
metadata:
  name: jupyterhub

---
# secrets for jupyterhub namespace
apiVersion: v1 
kind: Secret 
metadata:   
  name: urbalurba-secrets   
  namespace: jupyterhub
type: Opaque 
stringData: 

# for jupyterhub

  # Authentication password for DummyAuthenticator
  JUPYTERHUB_AUTH_PASSWORD: "SecretPassword1"


#------------ unity-catalog namespace ----------

---
# Define the unity-catalog namespace first
apiVersion: v1
kind: Namespace
metadata:
  name: unity-catalog

---
# secrets for unity-catalog namespace
apiVersion: v1 
kind: Secret 
metadata:   
  name: urbalurba-secrets   
  namespace: unity-catalog
type: Opaque 
stringData: 

# for unity catalog

  # Database connection to shared PostgreSQL in default namespace
  UNITYCATALOG_POSTGRES_USER: "unitycatalog"
  UNITYCATALOG_POSTGRES_PASSWORD: "SecretPassword1"
  UNITYCATALOG_POSTGRES_DB: "unitycatalog"

  # Unity Catalog server authentication
  UNITYCATALOG_ADMIN_TOKEN: "uc-admin-token-12345"


#------------ monitoring namespace ----------

---
# Define the monitoring namespace first
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring

---
# secrets for monitoring namespace
apiVersion: v1
kind: Secret
metadata:
  name: urbalurba-secrets
  namespace: monitoring
type: Opaque
stringData:
  # Grafana admin credentials
  grafana-admin-user: "admin"
  grafana-admin-password: "SecretPassword1"
  

#------------ authentik namespace ----------

---
# Define the authentik namespace first
apiVersion: v1
kind: Namespace
metadata:
  name: authentik

---
# secrets for authentik namespace
apiVersion: v1 
kind: Secret 
metadata:   
  name: urbalurba-secrets   
  namespace: authentik
type: Opaque 
stringData: 
  # Secret key for encryption (generate with: openssl rand 60 | base64 -w 0)
  AUTHENTIK_SECRET_KEY: "DuoCca6w0D7bMpfOhDZkQlKJ0fRMc+yEypgLilE754jMX2OoEffb3TzWzHqJ8880viR3UcWe6Zxgh6LL"
  
  # Database password - Note the double underscore in POSTGRESQL
  AUTHENTIK_POSTGRESQL__PASSWORD: "SecretPassword1"
  
  # Redis password - DUPLICATE OF DEFAULT NAMESPACE
  # IMPORTANT: This value MUST match REDIS_PASSWORD in default namespace urbalurba-secrets
  # Kubernetes does not support cross-namespace secret references in environment variables,
  # so we must duplicate this value here. Keep both values synchronized!
  AUTHENTIK_COPY_OF_REDIS_PASSWORD: "SecretPassword1"  # Must match default/urbalurba-secrets/REDIS_PASSWORD
  
  # ✅ CORRECTED: Bootstrap admin user configuration (fixed key names)
  AUTHENTIK_BOOTSTRAP_EMAIL: "admin@localhost"
  AUTHENTIK_BOOTSTRAP_PASSWORD: "SecretPassword1"
  