# 208-openwebui-config.yaml
#
# Description:
# Helm values file for deploying Open WebUI with the official Helm chart.
# - Uses external PostgreSQL (with pgvector) via pre-constructed DATABASE_URL from secrets.
# - Connects to both in-cluster and host Ollama instances.
# - Uses an external Tika deployment for document extraction.
# - Pipelines enabled for document processing.
# - Persistent storage via existing PVC.
# - Custom resource requests/limits for stability and performance.
# - Ingress is disabled here (handled separately in a separate manifest).
# - OAuth2/OIDC authentication via Authentik for dual authentication support (centralized in urbalurba-secrets).
#
# Usage:
#   helm upgrade --install open-webui open-webui/open-webui -n ai -f manifests/208-openwebui-config.yaml
#
# Prerequisites:
# - The 'urbalurba-secrets' secret must exist in the 'ai' namespace with required keys:
#   * DATABASE_URL: PostgreSQL connection string with pgvector support
#   * OPENWEBUI_OAUTH_CLIENT_ID: Authentik OAuth client ID
#   * OPENWEBUI_OAUTH_CLIENT_SECRET: Authentik OAuth client secret
#   * OPENWEBUI_OAUTH_PROVIDER_NAME: OAuth provider name (set to "Authentik")
#   * OPENWEBUI_OPENID_PROVIDER_URL: Authentik OIDC discovery endpoint
#   * OPENWEBUI_OPENID_REDIRECT_URI: OAuth callback URL
#   * OPENWEBUI_ENABLE_OAUTH_SIGNUP: Enable new user registration via OAuth
#   * OPENWEBUI_OAUTH_SCOPES: OAuth scopes to request
# - PersistentVolumeClaim 'openwebui-data' must exist in the 'ai' namespace.
# - Tika and Ollama should be deployed separately if not using the chart's built-in options.
# - Authentik OAuth application must be configured with matching redirect URI.

nameOverride: ""
namespaceOverride: "ai"

# Override Helm chart defaults to ensure our configuration takes precedence
fullnameOverride: "open-webui"

# External services configuration
ollama:
  enabled: false  # Using external Ollama instances

ollamaUrls:
  - "http://ollama:11434"                  # In-cluster Ollama
  - "http://host.lima.internal:11434"      # Host Ollama (adjust for your environment)

pipelines:
  enabled: true

tika:
  enabled: false  # Using external Tika deployment

websocket:
  enabled: false

redis-cluster:
  enabled: false

# Database configuration - using pre-constructed DATABASE_URL from secret
databaseUrl: ""

postgresql:
  enabled: false  # Using external PostgreSQL

# Storage configuration
persistence:
  enabled: true
  existingClaim: "openwebui-data"
  accessModes:
    - ReadWriteOnce
  size: 2Gi

# Resource management
resources:
  requests:
    memory: 1.5Gi
    cpu: 500m
  limits:
    memory: 3Gi
    cpu: 1500m

# Environment variables
extraEnvVars:
  # Database connection - use pre-constructed DATABASE_URL from secret
  - name: DATABASE_URL
    valueFrom:
      secretKeyRef:
        name: urbalurba-secrets
        key: DATABASE_URL

  # Model configuration
  - name: DEFAULT_MODELS
    value: "qwen3:0.6b"

  # Authentication
  - name: WEBUI_AUTH
    value: "true"
  - name: DEFAULT_USER_ROLE
    value: "user"

  # Document processing with Tika
  - name: CONTENT_EXTRACTION_ENGINE
    value: "tika"
  - name: TIKA_SERVER_URL
    value: "http://tika:9998"

  # Vector database configuration (PostgreSQL with pgvector)
  - name: VECTOR_DB
    value: "pgvector"
  - name: PGVECTOR_COLLECTION_NAME
    value: "openwebui_documents"

  # Embedding configuration
  - name: RAG_EMBEDDING_MODEL
    value: "all-MiniLM-L6-v2"

  # Additional features (verified Open WebUI environment variables)
  - name: ENABLE_RAG_LOCAL_WEB_FETCH
    value: "true"
  - name: ENABLE_WEB_SEARCH
    value: "false"
  - name: ENABLE_IMAGE_GENERATION
    value: "true"
  - name: ENABLE_COMMUNITY_SHARING
    value: "false"
  - name: ENABLE_ADMIN_EXPORT
    value: "true"

  # OAuth2/OIDC Configuration - Following official OpenWebUI documentation
  # This ensures proper OAuth provider recognition and browser compatibility
  
  # Enable OAuth authentication
  - name: OAUTH_ENABLED
    value: "true"
    
  # OAuth provider configuration
  - name: OAUTH_PROVIDER_NAME
    value: "Authentik"
    
  # OAuth client credentials
  - name: OAUTH_CLIENT_ID
    value: "1c37QuM0qm0g2BzdLbhppVwmUwUUrhmB83e9inEe"
    
  - name: OAUTH_CLIENT_SECRET
    value: "BngAuX1zthtYnyAxPePAwyTqDxfVSq09IDRUTAonRcogYmhnfj39eBk709nKF4ej1OT7OMiJWVYIrwOrdizTFiyQxapQUEpDziPNucs5yxIciEx21PkK82IgURILL06h"
    
  # OAuth scopes and settings
  - name: OAUTH_SCOPES
    value: "openid email profile"
    
  # OAuth debugging - set to DEBUG for detailed OAuth flow logging
  - name: OAUTH_LOG_LEVEL
    value: "DEBUG"
    
  # OAuth endpoints - using external hostnames for browser compatibility
  # These override the endpoints discovered from OPENID_PROVIDER_URL
  - name: OAUTH_AUTHORIZATION_URL
    value: "http://authentik.localhost/application/o/openwebui-dev/authorize/"
    
  - name: OAUTH_TOKEN_URL
    value: "http://authentik.localhost/application/o/openwebui-dev/token/"
    
  - name: OAUTH_USERINFO_URL
    value: "http://authentik.localhost/application/o/openwebui-dev/userinfo/"
    
  # OIDC provider URL - using external hostname for discovery
  - name: OPENID_PROVIDER_URL
    value: "http://authentik.localhost/application/o/openwebui-dev/.well-known/openid-configuration"
    
  # Redirect URI for OAuth callback - using external hostname for browser
  - name: OPENID_REDIRECT_URI
    value: "http://openwebui.localhost/oauth/oidc/callback"
    
  # Allow new users to register via OAuth (set to "false" to restrict to existing users)
  - name: ENABLE_OAUTH_SIGNUP
    value: "true"
    
  # Merge OAuth accounts by email address for better user experience
  - name: OAUTH_MERGE_ACCOUNTS_BY_EMAIL
    value: "true"

# Application logging configuration
logging:
  level: "info"
  components:
    rag: "info"
    db: "info"
    models: "info"
    ollama: "info"

# Networking (Ingress disabled - managed separately)
ingress:
  enabled: false