# File: manifests/072-authentik-system-core-whoami-blueprint.yaml
#
# Description:
# SYSTEM CORE WHOAMI: Combined blueprint containing essential whoami authentication setup + core system users/groups
# This is the CORE system blueprint that must always work for authentication testing
# NB! the users have the same password so you should not use this in production!!!
#
# This ConfigMap contains the baseline authentication setup - not for production!!!
#
# Prerequisites:
# - In the authentik helm values you must have the following:
# - blueprints:
#   configMaps:
#     - "system-core-whoami-blueprint"
# - Must be applied BEFORE Authentik starts


# Contents:
# 1. whoami-forward-auth.yaml - Forward authentication setup for whoami service + scope mappings for user data headers
# 2. core-users-groups.yaml - Core system test users and groups for authentication testing (see GROUPS TABLE below)
#
# HEADERS SENT TO WHOAMI POD:
# When a user accesses the protected whoami service, these headers are sent:
# 
# ===================================================================
# AUTOMATIC HEADERS (sent by Authentik proxy - no configuration needed)
# ===================================================================
# - X-authentik-username: User's login name (e.g., "core-it1")
# - X-authentik-email: User's email address (e.g., "core-it1@urbalurba.no")
# - X-authentik-name: User's display name (e.g., "Core IT User 1")
# - X-authentik-groups: User's groups as JSON array (e.g., ["Core IT"])
# - X-authentik-uid: User's unique ID
# - X-authentik-meta-outpost: Outpost name (e.g., "authentik Embedded Outpost")
# - X-authentik-meta-provider: Provider name (e.g., "whoami-provider")
# - X-authentik-meta-app: Application slug (e.g., "whoami")
# - X-authentik-meta-version: Outpost version
# 
# ===================================================================
# CUSTOM HEADERS (require scope mapping configuration - defined below)
# ===================================================================
# - X-Remote-User: User's login name (widely supported standard)
# - X-Remote-Email: User's email address (widely supported standard)
# - X-Remote-Name: User's display name (widely supported standard)
# - X-Remote-Groups: User's groups as comma-separated string (widely supported standard)
# - X-User-Department: User's department from attributes (e.g., "Core IT")
# - X-User-Employee: User's employee status from attributes (e.g., "True")
# 
# ===================================================================
# USER ATTRIBUTES NOT SENT AUTOMATICALLY
# ===================================================================
# These exist on users but require custom scope mapping to send as headers:
# - department: User's department (stored in user.attributes.department)
# - isEmployee: Employee status (stored in user.attributes.isEmployee)
# - environment: Environment marker (stored in user.attributes.environment)
# 
# Note: Only standard user fields (username, email, name, groups, uid) are sent
# automatically. All custom attributes require explicit scope mapping configuration.
#
# GROUPS TABLE:
# | Group Name   | Superuser | Attributes                                                        | Purpose                    |
# |--------------|-----------|-------------------------------------------------------------------|----------------------------|
# | Core IT      | false     | department: "Core IT", type: "department_group", env: "core"     | Core IT department users   |
# | Core Economy | false     | department: "Core Economy", type: "department_group", env: "core"| Core Economy department users |
#
# USERS TABLE:
# | Username   | Email                    | Name                 | Password    | Active | Groups         | Custom Attributes                                          |
# |------------|--------------------------|---------------------|-------------|--------|----------------|------------------------------------------------------------|
# | core-it1   | core-it1@urbalurba.no    | Core IT User 1      | Password123 | true   | ["Core IT"]    | department: "Core IT", isEmployee: true, env: "core"      |
# | core-it2   | core-it2@urbalurba.no    | Core IT User 2      | Password123 | true   | ["Core IT"]    | department: "Core IT", isEmployee: true, env: "core"      |
# | core-ok1   | core-ok1@urbalurba.no    | Core Economy User 1 | Password123 | true   | ["Core Economy"]| department: "Core Economy", isEmployee: true, env: "core" |
# | core-ok2   | core-ok2@urbalurba.no    | Core Economy User 2 | Password123 | true   | ["Core Economy"]| department: "Core Economy", isEmployee: true, env: "core" |
#
# Usage:
#   kubectl apply -f 072-authentik-system-core-whoami-blueprint.yaml
#
# TODO: Custom Headers Status
# ===========================
# Current Status: Custom headers are working and appear in JWT token under ak_proxy.user_attributes.additionalHeaders
# Issue: Headers are NOT appearing as actual HTTP headers in whoami output (only in JWT)
# 
# Headers currently in JWT:
# - X-Remote-User, X-Remote-Email, X-Remote-Name, X-Remote-Groups
# - X-User-Department, X-User-Employee
#
# Next Steps: Research how to make Authentik proxy provider send additionalHeaders 
# as actual HTTP headers to backend services instead of embedding them in JWT token.
# Reference: Authentik documentation on proxy provider custom headers
#


apiVersion: v1
kind: ConfigMap
metadata:
  name: system-core-whoami-blueprint
  namespace: authentik
  labels:
    app.kubernetes.io/name: authentik
    app.kubernetes.io/component: blueprint
    blueprints.goauthentik.io/instantiate: "true"
    blueprint-category: "system-known"
    system-component: "whoami"
data:
  whoami-forward-auth.yaml: |
    # yaml-language-server: $schema=https://goauthentik.io/blueprints/schema.json
    version: 1
    metadata:
      name: "Complete Whoami Forward Auth Setup"
      labels:
        blueprints.goauthentik.io/instantiate: "true"
    
    context: {}
    
    entries:
      # ================================================================
      # SCOPE MAPPINGS - Send custom user attributes as additional headers
      # ================================================================
      # 
      # NOTE: Standard headers (X-authentik-username, X-authentik-email, etc.) 
      # are sent AUTOMATICALLY by Authentik proxy - no configuration needed.
      # 
      # This scope mapping ONLY sends ADDITIONAL headers for:
      # 1. Cross-provider compatibility (X-Remote-* headers)
      # 2. Custom user attributes (department, isEmployee from user.attributes)
      # 
      # Without this scope mapping, only the automatic X-authentik-* headers are sent.
      
      # Note: Custom headers are now configured via user/group attributes
      # See user configurations below for additionalHeaders
      
      # ================================================================
      # PROXY PROVIDER - Create the proxy provider with scope mappings
      # ================================================================
      
      # Create the proxy provider first (referenced by application)
      - model: authentik_providers_proxy.proxyprovider
        state: present
        identifiers:
          name: "whoami-provider"
        attrs:
          name: "whoami-provider"
          mode: "forward_single"
          external_host: "http://whoami.localhost"
          access_token_validity: "hours=24"
          token_validity: "hours=24"
          refresh_token_validity: "days=30"
          intercept_header_auth: true
          internal_host_ssl_validation: false
          authorization_flow: !Find [authentik_flows.flow, [slug, default-provider-authorization-implicit-consent]]
          invalidation_flow: !Find [authentik_flows.flow, [slug, default-provider-invalidation-flow]]
          # No property mappings needed - custom headers via user attributes
          
      # Create the application and link it to the provider
      - model: authentik_core.application
        state: present
        identifiers:
          slug: "whoami"
        attrs:
          name: "whoami"
          slug: "whoami"
          meta_launch_url: "http://whoami.localhost"
          policy_engine_mode: "any"
          provider: !Find [authentik_providers_proxy.proxyprovider, [name, whoami-provider]]
          
      # Assign the application to the embedded outpost
      - model: authentik_outposts.outpost
        state: present
        identifiers:
          name: "authentik Embedded Outpost"
        attrs:
          name: "authentik Embedded Outpost"
          type: "proxy"
          providers:
            - !Find [authentik_providers_proxy.proxyprovider, [name, whoami-provider]]

  core-users-groups.yaml: |
    # yaml-language-server: $schema=https://goauthentik.io/blueprints/schema.json
    version: 1
    metadata:
      name: "Core System Users and Groups Setup"
      labels:
        blueprints.goauthentik.io/instantiate: "true"
    
    context: {}
    
    entries:
      # ================================================================
      # GROUPS - Create department-based groups first
      # ================================================================
      
      # Core IT Department Group
      - model: authentik_core.group
        state: present
        identifiers:
          name: "Core IT"
        attrs:
          name: "Core IT"
          is_superuser: false
          attributes:
            department: "Core IT"
            type: "department_group"
            environment: "core"
            
      # Core Economy Department Group  
      - model: authentik_core.group
        state: present
        identifiers:
          name: "Core Economy"
        attrs:
          name: "Core Economy"
          is_superuser: false
          attributes:
            department: "Core Economy"
            type: "department_group"
            environment: "core"
            
      # ================================================================
      # USERS - Create users and assign to groups
      # ================================================================
      
      # Core IT Department Users
      - model: authentik_core.user
        state: present
        identifiers:
          username: "core-it1"
        attrs:
          username: "core-it1"
          name: "Core IT User 1"
          email: "core-it1@urbalurba.no"
          password: "Password123"
          is_active: true
          attributes:
            department: "Core IT"
            isEmployee: true
            environment: "core"
            additionalHeaders:
              X-Remote-User: "core-it1"
              X-Remote-Email: "core-it1@urbalurba.no"
              X-Remote-Name: "Core IT User 1"
              X-Remote-Groups: "Core IT"
              X-User-Department: "Core IT"
              X-User-Employee: "True"
          groups:
            - !Find [authentik_core.group, [name, "Core IT"]]
            
      - model: authentik_core.user
        state: present
        identifiers:
          username: "core-it2"
        attrs:
          username: "core-it2"
          name: "Core IT User 2"
          email: "core-it2@urbalurba.no"
          password: "Password123"
          is_active: true
          attributes:
            department: "Core IT"
            isEmployee: true
            environment: "core"
            additionalHeaders:
              X-Remote-User: "core-it2"
              X-Remote-Email: "core-it2@urbalurba.no"
              X-Remote-Name: "Core IT User 2"
              X-Remote-Groups: "Core IT"
              X-User-Department: "Core IT"
              X-User-Employee: "True"
          groups:
            - !Find [authentik_core.group, [name, "Core IT"]]
            
      # Core Economy Department Users
      - model: authentik_core.user
        state: present
        identifiers:
          username: "core-ok1"
        attrs:
          username: "core-ok1"
          name: "Core Economy User 1"
          email: "core-ok1@urbalurba.no"
          password: "Password123"
          is_active: true
          attributes:
            department: "Core Economy"
            isEmployee: true
            environment: "core"
            additionalHeaders:
              X-Remote-User: "core-ok1"
              X-Remote-Email: "core-ok1@urbalurba.no"
              X-Remote-Name: "Core Economy User 1"
              X-Remote-Groups: "Core Economy"
              X-User-Department: "Core Economy"
              X-User-Employee: "True"
          groups:
            - !Find [authentik_core.group, [name, "Core Economy"]]
            
      - model: authentik_core.user
        state: present
        identifiers:
          username: "core-ok2"
        attrs:
          username: "core-ok2"
          name: "Core Economy User 2"
          email: "core-ok2@urbalurba.no"
          password: "Password123"
          is_active: true
          attributes:
            department: "Core Economy"
            isEmployee: true
            environment: "core"
            additionalHeaders:
              X-Remote-User: "core-ok2"
              X-Remote-Email: "core-ok2@urbalurba.no"
              X-Remote-Name: "Core Economy User 2"
              X-Remote-Groups: "Core Economy"
              X-User-Department: "Core Economy"
              X-User-Employee: "True"
          groups:
            - !Find [authentik_core.group, [name, "Core Economy"]]