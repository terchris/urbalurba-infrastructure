# File: manifests/073-authentik-2-openwebui-blueprint.yaml.j2
#
# Description:
# Jinja2 template for Authentik blueprint that automates the complete configuration of OpenWebUI OAuth2/OIDC integration
# INCLUDES: OAuth2 provider setup, application configuration, AND group/role mappings for access control
# Creates OAuth2 provider, application, and property mappings for OpenWebUI authentication via Authentik
# 
# This template generates a ConfigMap containing TWO blueprint files:
# 1. openwebui-oauth2-oidc.yaml - OAuth2/OIDC provider and application setup for OpenWebUI authentication
# 2. openwebui-group-mappings.yaml - Property mappings for groups and roles claims
#
# Dependencies:
# - This blueprint is SELF-CONTAINED and creates its own "HQ" and "Distrikt" groups
# - For meaningful authentication, deploy manifests/073-authentik-1-test-users-groups-blueprint.yaml first
# - The test users blueprint creates the actual users that will authenticate via OpenWebUI
# - Can be deployed independently, but groups will be empty without test users
#
# Usage:
#   Generated by Ansible from kubernetes-secrets.yml
#   kubectl apply -f manifests/073-authentik-2-openwebui-blueprint.yaml
#
# Prerequisites:
# - In the authentik helm values you must have the following:
# - blueprints:
#   configMaps:
#     - "openwebui-blueprint"
#
# Template Variables (from kubernetes-secrets.yml):
# - openwebui_oauth_client_id: OAuth client ID
# - openwebui_oauth_client_secret: OAuth client secret
# - openwebui_oauth_redirect_uri: OAuth redirect URI
# - authentik_host: Authentik host URL
#
# This blueprint was corrected based on working manual setup:
# Export commands used to capture working config:
# kubectl exec -it -n authentik deployment/authentik-worker -- python manage.py dumpdata authentik_providers_oauth2.oauth2provider --format=yaml --pk=4

apiVersion: v1
kind: ConfigMap
metadata:
  name: openwebui-blueprint
  namespace: authentik
  labels:
    app.kubernetes.io/name: authentik
    app.kubernetes.io/component: blueprint
    blueprints.goauthentik.io/instantiate: "true"
data:
  openwebui-oauth2-oidc.yaml: |
    # yaml-language-server: $schema=https://goauthentik.io/blueprints/schema.json
    version: 1
    metadata:
      name: "Complete OpenWebUI OAuth2/OIDC Setup"
      labels:
        blueprints.goauthentik.io/instantiate: "true"
    
    context: {}
    
    entries:
      # Create the OAuth2/OIDC provider first (referenced by application)
      - model: authentik_providers_oauth2.oauth2provider
        state: present
        identifiers:
          name: openwebui-dev-provider
        attrs:
          name: openwebui-dev-provider
          client_type: confidential
          client_id: {{ openwebui_oauth_client_id }}
          client_secret: {{ openwebui_oauth_client_secret }}
          # Correct redirect URIs format matching working config
          redirect_uris:
            - matching_mode: strict
              url: {{ openwebui_oauth_redirect_uri }}
          # Token validity settings from working config
          access_code_validity: minutes=1
          access_token_validity: minutes=5
          refresh_token_validity: days=30
          # Additional settings from working config
          sub_mode: hashed_user_id
          issuer_mode: per_provider
          include_claims_in_id_token: true
          # Flow references
          authorization_flow: !Find [authentik_flows.flow, [slug, default-provider-authorization-implicit-consent]]
          invalidation_flow: !Find [authentik_flows.flow, [slug, default-provider-invalidation-flow]]
          signing_key: !Find [authentik_crypto.certificatekeypair, [name, authentik Self-signed Certificate]]
          # Property mappings - only the 3 that are actually used in working config
          property_mappings:
            - !Find [authentik_providers_oauth2.scopemapping, [name, "authentik default OAuth Mapping: OpenID 'openid'"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "authentik default OAuth Mapping: OpenID 'email'"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "authentik default OAuth Mapping: OpenID 'profile'"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "OpenWebUI Groups Mapping"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "OpenWebUI Roles Mapping"]]
          
      # Create the application and link it to the provider
      - model: authentik_core.application
        state: present
        identifiers:
          slug: openwebui-dev
        attrs:
          name: openwebui-dev
          slug: openwebui-dev
          # Empty launch URL as in working config
          meta_launch_url: ""
          policy_engine_mode: any
          provider: !Find [authentik_providers_oauth2.oauth2provider, [name, openwebui-dev-provider]]

  openwebui-group-mappings.yaml: |
    # yaml-language-server: $schema=https://goauthentik.io/blueprints/schema.json
    version: 1
    metadata:
      name: "OpenWebUI Group Claims Mappings"
      labels:
        blueprints.goauthentik.io/instantiate: "true"
    
    context: {}
    
    entries:
      # ================================================================
      # GROUPS - Create organizational groups first (self-contained)
      # ================================================================
      
      # HQ Group (Nasjonalkontoret)
      - model: authentik_core.group
        state: present
        identifiers:
          name: "HQ"
        attrs:
          name: "HQ"
          is_superuser: false
          attributes:
            type: "org_group"
            scope: "hq"
            
      # Distrikt Group (District offices)
      - model: authentik_core.group
        state: present
        identifiers:
          name: "Distrikt"
        attrs:
          name: "Distrikt"
          is_superuser: false
          attributes:
            type: "org_group"
            scope: "district"
            
      # ================================================================
      # PROPERTY MAPPINGS - Create scope mappings for groups and roles
      # ================================================================
      # Create property mapping to include groups in tokens
      - model: authentik_providers_oauth2.scopemapping
        state: present
        identifiers:
          name: "OpenWebUI Groups Mapping"
        attrs:
          name: "OpenWebUI Groups Mapping"
          scope_name: "groups"
          description: "OpenWebUI groups scope mapping"
          expression: |
            return {
              "groups": [group.name for group in user.ak_groups.all()],
            }
            
      # Create property mapping for roles (optional - for role-based access)
      - model: authentik_providers_oauth2.scopemapping
        state: present
        identifiers:
          name: "OpenWebUI Roles Mapping"
        attrs:
          name: "OpenWebUI Roles Mapping"
          scope_name: "roles"
          description: "OpenWebUI roles scope mapping"
          expression: |
            roles = []
            # Map groups to roles - customize this logic as needed
            user_groups = [group.name for group in user.ak_groups.all()]
            
            if "HQ" in user_groups:
                roles.append("admin")  # HQ users get admin role
            else:
                roles.append("user")   # Other users get user role
                
            return {
              "roles": roles,
            }
