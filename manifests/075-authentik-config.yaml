# File: manifests/075-authentik-config.yaml
#
# Description:
# Helm values file for deploying Authentik 2025.8.0 in the 'authentik' namespace with:
# - External PostgreSQL and Redis (running in 'default' namespace)
# - Automatic bootstrap admin account
# - External Traefik IngressRoute for access (managed separately)
# - Embedded outpost for forward authentication
# - Blueprint system enabled for automated configuration
# - Worker metrics enabled for Prometheus monitoring (2025.8+ feature)
# - ALL HARDCODED VALUES REPLACED WITH KUBERNETES SECRETS
# - Uses valueFrom.secretKeyRef to reference urbalurba-secrets in authentik namespace
#
# Ingress Configuration:
# - Built-in Helm ingress is DISABLED (server.ingress.enabled: false)
# - Ingress is managed by separate IngressRoute: 076-authentik-ingressroute.yaml
# - Uses HostRegexp pattern for unified internal/external routing
# - Enables CoreDNS resolution for OAuth integration with OpenWebUI
#
# Usage:
# helm repo add authentik https://charts.goauthentik.io
# helm repo update
# helm install authentik authentik/authentik -f 075-authentik-config.yaml -n authentik
#
# Prerequisites:
# - urbalurba-secrets secret must exist in authentik namespace with required keys:
#   * AUTHENTIK_SECRET_KEY: Secret key for session encryption
#   * AUTHENTIK_POSTGRESQL__PASSWORD: PostgreSQL password
#   * AUTHENTIK_REDIS__PASSWORD: Redis password
#   * AUTHENTIK_BOOTSTRAP_EMAIL: Bootstrap admin email
#   * AUTHENTIK_BOOTSTRAP_PASSWORD: Bootstrap admin password
#
# Dependencies:
# - PostgreSQL service running in default namespace
# - Redis service running in default namespace
# - Authentik database and user created in PostgreSQL
# - 073-authentik-whoami-blueprint.yaml MUST be applied FIRST
# - urbalurba-secrets secret must exist in authentik namespace
#
# Database Setup:
# Run this command to create the required database:
# docker exec -it provision-host ansible-playbook /mnt/urbalurbadisk/ansible/playbooks/utility/u09-authentik-create-postgres.yml
#
# Testing:
# curl -I http://authentik.localhost
# Should return HTTP 302 redirect to authentication flow
#
#
# Integration:
# - Creates embedded outpost service for forward authentication
# - Outpost endpoint: ak-outpost-authentik-embedded-outpost.authentik.svc.cluster.local:9000
# - UI accessible at: http://authentik.localhost
# - Blueprint system enabled for automated configuration
# - Worker metrics exposed for Prometheus monitoring
#
# üö® IMPORTANT: After cluster reset, you MUST log into the admin interface
# at http://authentik.localhost to activate the outpost configuration.
# This triggers the outpost to apply its settings and enables authentication.
# See doc/package-authentication.md for detailed troubleshooting information.
# if you dont log in to the admin UI it simply dont work. No need to do anything. just log in and click Applications -> Applications

---
authentik:
  # CRITICAL: Secret key for session encryption and security (must be 50+ chars)
  # Now loaded from Kubernetes secret via environment variable
  secret_key: "${AUTHENTIK_SECRET_KEY}"

  # Debugging and error reporting
  error_reporting:
    enabled: true

  # External PostgreSQL configuration
  postgresql:
    host: "postgresql.default.svc.cluster.local"
    name: authentik
    user: authentik
    port: 5432
    # Password now loaded from Kubernetes secret via environment variable
    password: "${AUTHENTIK_POSTGRESQL__PASSWORD}"

  # External Redis configuration (still needed for caching, not background tasks)
  redis:
    host: "redis-master.default.svc.cluster.local"
    port: 6379
    # Password now loaded from Kubernetes secret via environment variable
    password: "${AUTHENTIK_REDIS__PASSWORD}"

# CRITICAL: Environment variables for Authentik + outpost communication
global:
  env:
    # Bootstrap admin account (only used on *first startup*)
    - name: AUTHENTIK_BOOTSTRAP_EMAIL
      valueFrom:
        secretKeyRef:
          name: urbalurba-secrets
          key: AUTHENTIK_BOOTSTRAP_EMAIL
    - name: AUTHENTIK_BOOTSTRAP_PASSWORD
      valueFrom:
        secretKeyRef:
          name: urbalurba-secrets
          key: AUTHENTIK_BOOTSTRAP_PASSWORD
    # Internal cluster URL (used by outpost ‚Üí server communication)
    - name: AUTHENTIK_HOST
      value: "http://authentik.localhost"
    # Allow HTTP (‚ö†Ô∏è dev only ‚Äî don't use in production)
    - name: AUTHENTIK_INSECURE
      value: "true"
    # Secret key for session encryption and security
    - name: AUTHENTIK_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: urbalurba-secrets
          key: AUTHENTIK_SECRET_KEY
    # PostgreSQL password
    - name: AUTHENTIK_POSTGRESQL__PASSWORD
      valueFrom:
        secretKeyRef:
          name: urbalurba-secrets
          key: AUTHENTIK_POSTGRESQL__PASSWORD
    # Redis password
    - name: AUTHENTIK_REDIS__PASSWORD
      valueFrom:
        secretKeyRef:
          name: urbalurba-secrets
          key: AUTHENTIK_REDIS__PASSWORD

# Blueprint system configuration
blueprints:
  # List of ConfigMaps containing blueprints
  # Only keys ending with .yaml will be discovered and applied
  configMaps:
    - "system-core-whoami-blueprint" # this is the core system blueprint used to verify that the authentication is working
    - "test-users-groups-blueprint" # test users and groups blueprint
    - "openwebui-blueprint" # openwebui blueprint
    - "app-slot1-blueprint" # app slot 1 blueprint

    

# Authentik server ingress configuration
# NOTE: Ingress is now managed by separate IngressRoute (076-authentik-ingressroute.yaml)
# This provides HostRegexp support for unified internal/external routing
server:
  ingress:
    enabled: false  # Disabled - using separate IngressRoute for better control
    # ingressClassName: traefik  # Not needed when disabled
    # hosts:                     # Managed by IngressRoute with HostRegexp
    #   - authentik.localhost    # Pattern: authentik\..+ for multi-domain support

# Worker enabled with metrics for Prometheus monitoring (2025.8+ feature)
worker:
  enabled: true
  # Enable metrics for better observability of background tasks
  metrics:
    enabled: true
    # Optional: Enable ServiceMonitor for Prometheus scraping
    serviceMonitor:
      enabled: false  # Set to true if using Prometheus Operator

# Disable built-in Postgres/Redis (using external services)
postgresql:
  enabled: false
redis:
  enabled: false
