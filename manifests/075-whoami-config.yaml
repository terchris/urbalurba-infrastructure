# File: manifests/075-whoami-config.yaml
#
# Description:
# Complete Kubernetes manifest to deploy the `whoami` test application for authentication testing.
# - Combines Deployment, Service, and Traefik IngressRoute into one file
# - Uses the standard `traefik/whoami` Docker Hub image for reliable testing
# - Pre-configured with `authentik-forwardauth` middleware for forward authentication
# - Displays HTTP request details including authentication headers when accessed
#
# Components:
# - Deployment: Single replica whoami container with resource limits
# - Service: ClusterIP service for internal cluster access  
# - IngressRoute: Traefik routing with forward authentication middleware
#
# Requirements:
# - Traefik ingress controller running in cluster
# - Traefik Middleware `authentik-forwardauth` deployed (see `manifests/073-traefik-forward-auth-middleware.yaml`)
# - Authentik forward authentication system configured
# - Rancher Desktop (automatically routes .localhost domains to localhost)
#
# Usage:
# kubectl apply -f manifests/075-whoami-config.yaml
#
# Access:
# - External (with auth): http://whoami.localhost (requires authentication via Authentik)
# - Internal (no auth): Use testing commands below for direct service access
#
# Testing & Verification:
# Use these commands to verify the whoami application is working correctly at different levels.
#
# == QUICK TESTS (One-liners) ==
#
# Test 1: Basic service connectivity
# kubectl run curl-test --image=curlimages/curl --rm -it --restart=Never -- curl -s http://whoami-service
#
# Test 2: Service with authentication headers (simulates post-auth state)
# kubectl run curl-test --image=curlimages/curl --rm -it --restart=Never -- curl -s -H "X-Forwarded-User: admin@test.com" -H "X-Forwarded-Email: admin@test.com" -H "X-Forwarded-Groups: admin,developer" http://whoami-service
#
# Test 3: Full cluster DNS test
# kubectl run curl-test --image=curlimages/curl --rm -it --restart=Never -- curl -s http://whoami-service.default.svc.cluster.local
#
# == DETAILED TESTING ==
#
# Step 1: Check pod status
# kubectl get pods -l app=whoami
# Expected: Shows 1/1 Running pod
#
# Step 2: Check service endpoints  
# kubectl get svc whoami-service
# kubectl describe svc whoami-service
# Expected: ClusterIP service with endpoints pointing to whoami pod
#
# Step 3: Check ingress route
# kubectl get ingressroute whoami-ingress
# kubectl describe ingressroute whoami-ingress  
# Expected: IngressRoute with authentik-forwardauth middleware configured
#
# Step 4: Create persistent test pod for detailed testing
# kubectl apply -f - <<EOF
# apiVersion: v1
# kind: Pod
# metadata:
#   name: whoami-test-pod
#   namespace: default
# spec:
#   restartPolicy: Never
#   containers:
#   - name: curl
#     image: curlimages/curl:latest
#     command: ["sleep"]
#     args: ["300"]
# EOF
#
# Step 5: Run comprehensive tests from test pod
# kubectl exec -it whoami-test-pod -- curl -s http://whoami-service
# kubectl exec -it whoami-test-pod -- curl -s http://whoami-service.default.svc.cluster.local
# kubectl exec -it whoami-test-pod -- curl -s -H "X-Forwarded-User: testuser@example.com" http://whoami-service
# kubectl exec -it whoami-test-pod -- curl -s -H "X-Forwarded-Email: testuser@example.com" -H "X-Forwarded-Groups: admin,developer" http://whoami-service
#
# Step 6: Clean up test pod
# kubectl delete pod whoami-test-pod
#
# == EXPECTED OUTPUTS ==
#
# Successful whoami response should show:
# ```
# Hostname: whoami-deployment-[pod-hash]
# IP: 127.0.0.1
# IP: ::1  
# IP: [pod-ip]
# IP: [pod-ipv6]
# RemoteAddr: [client-ip:port]
# GET / HTTP/1.1
# Host: [service-name]
# User-Agent: curl/[version]
# Accept: */*
# [any forwarded headers appear here]
# ```
#
# Authentication headers test should additionally show:
# ```
# X-Forwarded-Email: testuser@example.com
# X-Forwarded-Groups: admin,developer  
# X-Forwarded-User: testuser@example.com
# ```
#
# == TROUBLESHOOTING ==
#
# Pod not starting:
# kubectl describe pod [whoami-pod-name]
# kubectl logs [whoami-pod-name]
#
# Service not accessible:
# kubectl get endpoints whoami-service
# kubectl describe svc whoami-service
#
# External access failing (authentication issues):
# Check Authentik logs: kubectl logs -l app.kubernetes.io/name=authentik -n authentik
# Check Traefik logs: kubectl logs -l app.kubernetes.io/name=traefik -n kube-system
# Check middleware: kubectl describe middleware authentik-forwardauth -n default
#
# == AUTHENTICATION FLOW TESTING ==
#
# Without authentication (should redirect to Authentik):
# 1. Open browser to http://whoami.localhost
# 2. Should redirect to http://authentik.localhost for login
# 3. After login, should redirect back with headers visible
#
# Direct service access (bypasses authentication):
# Use the kubectl commands above to test service directly
#
# Notes:
# - The whoami app shows ALL HTTP headers it receives
# - Perfect for verifying forward authentication headers
# - Direct service tests bypass Traefik/Authentik (useful for troubleshooting)
# - External browser tests go through full authentication flow
# - Resource limits prevent resource exhaustion in testing environments
#
---
apiVersion: v1
kind: Service
metadata:
  name: whoami-service
  labels:
    app: whoami
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: whoami
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: whoami-deployment
  labels:
    app: whoami
spec:
  replicas: 1
  selector:
    matchLabels:
      app: whoami
  template:
    metadata:
      labels:
        app: whoami
    spec:
      containers:
      - name: whoami
        image: traefik/whoami
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 10m
            memory: 20Mi
          limits:
            cpu: 20m
            memory: 40Mi
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: whoami-ingress
  labels:
    app: whoami
spec:
  entryPoints:
    - web
  routes:
  - match: Host(`whoami.localhost`)
    kind: Rule
    services:
    - name: whoami-service
      port: 80
    middlewares:
    - name: authentik-forwardauth
      namespace: default