# File: manifests/074-authentik-openwebui-blueprint-hardcoded.yaml
#
# Description:
# Authentik blueprint that automates the configuration of OpenWebUI OAuth2/OIDC application
# CORRECTED VERSION - Based on working manual configuration export
# Creates OAuth2 provider and application for OpenWebUI authentication via Authentik
#
# Usage:
#   kubectl apply -f manifests/074-authentik-openwebui-blueprint-hardcoded.yaml
#
# Prerequisites:
# - In the authentik helm values you must have the following:
# - blueprints:
#   configMaps:
#     - "openwebui-authentik-blueprint"
#
# This is how to set up manually in Authentik UI:
# Before deploying this secret, configure in Authentik UI (authentik.localhost):
# 1. Applications > Applications > Create with Provider
# 1.1 Name: "openwebui-dev"
# 1.2 Slug: "openwebui-dev"
# 1.3 click Next
# 2. Provider Type: "OAuth2/OpenID Connect"
# 2.1 click Next
# 3. Name: "openwebui-dev-provider"
# 3.1 Authentication Flow: "default-provider-authorization-implicit-consent (Authorize Application)"
# 3.2 Client Type: "Confidential" 
# 3.3 Client ID: 1c37QuM0qm0g2BzdLbhppVwmUwUUrhmB83e9inEe
# 3.4 Client Secret: BngAuX1zthtYnyAxPePAwyTqDxfVSq09IDRUTAonRcogYmhnfj39eBk709nKF4ej1OT7OMiJWVYIrwOrdizTFiyQxapQUEpDziPNucs5yxIciEx21PkK82IgURILL06h
# 3.5 Redirect URIs/Orgins (RegEx): Click add 
# 3.6 select "Strict" and enter "http://openwebui.localhost/oauth/oidc/callback"
# note that it is http and not https when we use localhost
# 3.7 Click Next 
# 4. On Configure Bindings click next (All authenticated Authentik users can access OpenWebUI dev environment )
# 5. Review the Application and Provider click Submit
#
# This blueprint was corrected based on working manual setup:
# Export commands used to capture working config:
# kubectl exec -it -n authentik deployment/authentik-worker -- python manage.py dumpdata authentik_providers_oauth2.oauth2provider --format=yaml --pk=4

apiVersion: v1
kind: ConfigMap
metadata:
  name: openwebui-authentik-blueprint
  namespace: authentik
  labels:
    app.kubernetes.io/name: authentik
    app.kubernetes.io/component: blueprint
    blueprints.goauthentik.io/instantiate: "true"
data:
  openwebui.yaml: |
    # yaml-language-server: $schema=https://goauthentik.io/blueprints/schema.json
    version: 1
    metadata:
      name: "Complete OpenWebUI OAuth2/OIDC Setup"
      labels:
        blueprints.goauthentik.io/instantiate: "true"
    
    context: {}
    
    entries:
      # Create the OAuth2/OIDC provider first (referenced by application)
      - model: authentik_providers_oauth2.oauth2provider
        state: present
        identifiers:
          name: openwebui-dev-provider
        attrs:
          name: openwebui-dev-provider
          client_type: confidential
          client_id: 1c37QuM0qm0g2BzdLbhppVwmUwUUrhmB83e9inEe
          client_secret: BngAuX1zthtYnyAxPePAwyTqDxfVSq09IDRUTAonRcogYmhnfj39eBk709nKF4ej1OT7OMiJWVYIrwOrdizTFiyQxapQUEpDziPNucs5yxIciEx21PkK82IgURILL06h
          # Correct redirect URIs format matching working config
          redirect_uris:
            - matching_mode: strict
              url: http://openwebui.localhost/oauth/oidc/callback
          # Token validity settings from working config
          access_code_validity: minutes=1
          access_token_validity: minutes=5
          refresh_token_validity: days=30
          # Additional settings from working config
          sub_mode: hashed_user_id
          issuer_mode: per_provider
          include_claims_in_id_token: true
          # Flow references
          authorization_flow: !Find [authentik_flows.flow, [slug, default-provider-authorization-implicit-consent]]
          invalidation_flow: !Find [authentik_flows.flow, [slug, default-provider-invalidation-flow]]
          signing_key: !Find [authentik_crypto.certificatekeypair, [name, authentik Self-signed Certificate]]
          # Property mappings - only the 3 that are actually used in working config
          property_mappings:
            - !Find [authentik_providers_oauth2.scopemapping, [name, "authentik default OAuth Mapping: OpenID 'openid'"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "authentik default OAuth Mapping: OpenID 'email'"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "authentik default OAuth Mapping: OpenID 'profile'"]]
          
      # Create the application and link it to the provider
      - model: authentik_core.application
        state: present
        identifiers:
          slug: openwebui-dev
        attrs:
          name: openwebui-dev
          slug: openwebui-dev
          # Empty launch URL as in working config
          meta_launch_url: ""
          policy_engine_mode: any
          provider: !Find [authentik_providers_oauth2.oauth2provider, [name, openwebui-dev-provider]]
