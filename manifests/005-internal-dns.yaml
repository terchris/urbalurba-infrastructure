# File: manifests/005-internal-dns.yaml
#
# Description:
# CoreDNS configuration patch to enable internal pod-to-pod DNS resolution for *.localhost hostnames.
# Solves the OAuth integration issue where pods need to resolve external hostnames (like authentik.localhost)
# to internal service IPs for proper communication within the cluster.
#
# Problem Solved:
# - OpenWebUI pod needs to resolve authentik.localhost to authenticate users via OAuth
# - Browser requests work (via Traefik) but pod-to-pod requests fail due to DNS resolution
# - *.localhost domains resolve to 127.0.0.1 externally but are unreachable from within pods
# - CoreDNS needs rewrite rules to map *.localhost to actual service ClusterIPs
#
# How It Works:
# 1. Patches the existing CoreDNS ConfigMap in kube-system namespace
# 2. Adds rewrite rules that translate *.localhost to *.svc.cluster.local
# 3. CoreDNS deployment restart picks up the new configuration
# 4. Pods can now resolve authentik.localhost to authentik-server.authentik.svc.cluster.local
#
# DNS Mappings Created:
# - authentik.localhost ‚Üí authentik-server.authentik.svc.cluster.local (CRITICAL for OAuth)
# - openwebui.localhost ‚Üí open-webui.ai.svc.cluster.local (for completeness)
#
# Architecture Integration:
# - Traefik IngressRoutes use HostRegexp(`service\..+`) for external access
# - CoreDNS rewrite rules enable internal pod-to-pod access
# - Same hostname works in both browser (external) and pod (internal) contexts
# - OAuth flow: Browser ‚Üí Traefik ‚Üí Service, Pod ‚Üí CoreDNS ‚Üí Service
#
# Deployment Order:
# - File: 005-internal-dns.yaml (early deployment for DNS foundation)
# - Deployed BEFORE services that depend on internal DNS resolution
# - Deployed AFTER basic cluster setup (namespaces, RBAC)
# - Must be applied before OAuth-dependent services like OpenWebUI
#
# Usage:
# kubectl apply -f manifests/005-internal-dns.yaml
# kubectl rollout restart deployment/coredns -n kube-system
#
# Verification:
# kubectl exec -it deployment/open-webui -n ai -- nslookup authentik.localhost
# Should return: authentik-server.authentik.svc.cluster.local (10.43.x.x)
#
# kubectl exec -it deployment/open-webui -n ai -- curl -I http://authentik.localhost/.well-known/openid-configuration
# Should return: HTTP/200 with OpenID configuration JSON
#
# Maintenance:
# - Add new rewrite rules to the Corefile section below
# - Apply the manifest: kubectl apply -f 005-internal-dns.yaml
# - Restart CoreDNS: kubectl rollout restart deployment/coredns -n kube-system
# - Test resolution from pods before deploying dependent services
#
# Troubleshooting:
# - Check CoreDNS pods: kubectl get pods -n kube-system -l k8s-app=kube-dns
# - View CoreDNS logs: kubectl logs -n kube-system -l k8s-app=kube-dns -f
# - Verify ConfigMap: kubectl get configmap coredns -n kube-system -o yaml
# - Test from pods: kubectl exec -it <pod> -- nslookup <hostname>.localhost
#
# Dependencies:
# - CoreDNS running in kube-system namespace (Rancher Desktop default)
# - Target services must exist in their respective namespaces
# - Traefik IngressRoutes should be configured for external access
#
# Future Automation:
# This hardcoded approach can be replaced with automated solutions:
# - External-DNS with CoreDNS provider for annotation-based automation
# - Custom controller that watches IngressRoute HostRegexp patterns
# - Script-based automation that parses Traefik CRDs and updates DNS
#
# Cluster Standards Compliance:
# - Follows early deployment pattern (005- prefix)
# - Documents problem, solution, and maintenance procedures
# - Integrates with existing Traefik IngressRoute architecture
# - Maintains backward compatibility with manual DNS management
#
# OAuth Integration Context:
# This configuration specifically enables OAuth authentication flows where:
# 1. Browser accesses openwebui.localhost ‚Üí Traefik ‚Üí OpenWebUI service
# 2. OpenWebUI service needs to query authentik.localhost ‚Üí CoreDNS ‚Üí Authentik service
# 3. OAuth discovery and token validation work end-to-end
# 4. Same hostname configuration works for both browser and pod contexts

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns-custom
  namespace: kube-system
  labels:
    app: coredns-custom
    purpose: internal-dns-resolution
    component: dns-config
data:
  # Custom CoreDNS configuration with internal DNS rewrite rules
  # This configuration will be merged with the default CoreDNS setup
  Corefile: |
    .:53 {
        errors
        health {
            lameduck 5s
        }
        ready
        
        # Internal DNS rewrite rules for *.localhost hostnames
        # Maps external hostnames to internal service FQDNs
        # CRITICAL: authentik.localhost required for OpenWebUI OAuth integration
        rewrite name authentik.localhost authentik-server.authentik.svc.cluster.local
        rewrite name openwebui.localhost open-webui.ai.svc.cluster.local
        
        # Standard Kubernetes DNS resolution
        kubernetes cluster.local in-addr.arpa ip6.arpa {
            pods insecure
            fallthrough in-addr.arpa ip6.arpa
            ttl 30
        }
        
        # Metrics endpoint for monitoring
        prometheus :9153
        
        # Forward non-cluster DNS to upstream resolvers
        forward . /etc/resolv.conf {
            max_concurrent 1000
        }
        
        # DNS response caching
        cache 30
        loop
        reload
        loadbalance
    }

---
# Job to apply the custom CoreDNS configuration
# This job patches the existing CoreDNS ConfigMap and restarts the deployment
apiVersion: batch/v1
kind: Job
metadata:
  name: coredns-patch-internal-dns
  namespace: kube-system
  labels:
    app: coredns-patch
    purpose: internal-dns-setup
    component: dns-patcher
spec:
  ttlSecondsAfterFinished: 300  # Clean up job after 5 minutes
  template:
    metadata:
      labels:
        app: coredns-patch
        purpose: internal-dns-setup
    spec:
      serviceAccountName: coredns-patcher
      restartPolicy: OnFailure
      containers:
      - name: kubectl-patcher
        image: bitnami/kubectl:latest
        command: ["/bin/bash"]
        args:
          - -c
          - |
            echo "üîß Patching CoreDNS ConfigMap with internal DNS rules..."
            
            # Apply the custom Corefile configuration
            kubectl patch configmap coredns -n kube-system --type merge --patch '
            {
              "data": {
                "Corefile": ".:53 {\n    errors\n    health {\n        lameduck 5s\n    }\n    ready\n    \n    # Internal DNS rewrite rules for *.localhost hostnames\n    rewrite name authentik.localhost authentik-server.authentik.svc.cluster.local\n    rewrite name openwebui.localhost open-webui.ai.svc.cluster.local\n    \n    # Standard Kubernetes DNS resolution\n    kubernetes cluster.local in-addr.arpa ip6.arpa {\n        pods insecure\n        fallthrough in-addr.arpa ip6.arpa\n        ttl 30\n    }\n    \n    prometheus :9153\n    forward . /etc/resolv.conf {\n        max_concurrent 1000\n    }\n    cache 30\n    loop\n    reload\n    loadbalance\n}"
              }
            }'
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ CoreDNS ConfigMap patched successfully"
            else
              echo "‚ùå Failed to patch CoreDNS ConfigMap"
              exit 1
            fi
            
            echo "‚ôªÔ∏è  Restarting CoreDNS deployment to apply changes..."
            kubectl rollout restart deployment/coredns -n kube-system
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ CoreDNS deployment restart initiated"
            else
              echo "‚ùå Failed to restart CoreDNS deployment"
              exit 1
            fi
            
            echo "‚è≥ Waiting for CoreDNS rollout to complete..."
            kubectl rollout status deployment/coredns -n kube-system --timeout=300s
            
            if [ $? -eq 0 ]; then
              echo "üéâ CoreDNS internal DNS configuration applied successfully!"
              echo ""
              echo "üîç Verification commands:"
              echo "kubectl exec -it deployment/open-webui -n ai -- nslookup authentik.localhost"
              echo "kubectl exec -it deployment/open-webui -n ai -- curl -I http://authentik.localhost/.well-known/openid-configuration"
            else
              echo "‚ùå CoreDNS rollout failed or timed out"
              exit 1
            fi

---
# Service account for the patch job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns-patcher
  namespace: kube-system
  labels:
    app: coredns-patcher
    purpose: internal-dns-setup

---
# Role for patching CoreDNS ConfigMap and managing deployments
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: kube-system
  name: coredns-patcher
  labels:
    app: coredns-patcher
    purpose: internal-dns-setup
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "patch", "update"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "patch", "update"]
- apiGroups: ["apps"]
  resources: ["deployments/status"]
  verbs: ["get"]

---
# Role binding for the patch job
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: coredns-patcher
  namespace: kube-system
  labels:
    app: coredns-patcher
    purpose: internal-dns-setup
subjects:
- kind: ServiceAccount
  name: coredns-patcher
  namespace: kube-system
roleRef:
  kind: Role
  name: coredns-patcher
  apiGroup: rbac.authorization.k8s.io

---
# Optional: ServiceMonitor for monitoring CoreDNS metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: coredns-internal-dns
  namespace: kube-system
  labels:
    app: coredns
    purpose: internal-dns-monitoring
spec:
  selector:
    matchLabels:
      k8s-app: kube-dns
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics